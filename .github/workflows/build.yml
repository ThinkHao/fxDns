name: 构建与发布

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: 构建
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true

      - name: 获取依赖
        run: go mod download

      - name: 构建
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          OUTPUT="fxdns"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT="fxdns.exe"
          fi
          mkdir -p dist
          if [ "${{ matrix.goos }}" = "linux" ]; then
            CGO_ENABLED=0 go build -v -o "dist/${OUTPUT}" ./cmd/fxdns
          else
            go build -v -o "dist/${OUTPUT}" ./cmd/fxdns
          fi

      - name: 准备打包文件
        run: |
          mkdir -p release
          cp dist/* release/
          cp config/config.yaml release/config.example.yaml # 请确保这是正确的源配置文件路径
          # 如果 setup.sh 在项目根目录
          if [ "${{ matrix.goos }}" = "linux" ]; then
            if [ -f ./setup.sh ]; then
              cp ./setup.sh release/
              chmod +x release/setup.sh
              echo "setup.sh 已添加到 Linux 包中"
            else
              echo "警告: setup.sh 未在项目根目录找到，Linux 包将不包含安装脚本。"
            fi
          fi
          cp README.md release/ || echo "README.md 不存在"
          cp LICENSE release/ || echo "LICENSE 不存在"

      - name: 打包
        run: |
          cd release
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -r "../fxdns-${{ matrix.goos }}-${{ matrix.goarch }}.zip" .
          else
            tar -czvf "../fxdns-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" .
          fi
          cd ..

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: fxdns-${{ matrix.goos }}-${{ matrix.goarch }}
          path: fxdns-${{ matrix.goos }}-${{ matrix.goarch }}.*

  release:
    name: 发布
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要此权限来创建 GitHub Release
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: 创建发布
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/fxdns-*/*.zip
            artifacts/fxdns-*/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
